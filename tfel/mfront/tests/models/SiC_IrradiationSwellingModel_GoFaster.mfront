@Parser   Model;
@Model    IrradiationSwellingModel_GoFaster;
@Material SiC;
@Author   Huguet Juan;
@Date     21/06/2012;

@Description{
 "> E. E. Bloom, Journal of Nuclear Materials"
 "> 258-263 (198) 7-19"
}

@Parameter Phi0 = 0.3396e25;

@Output s;
s.setGlossaryName("IrradiationInducedSwelling");
s.setDefaultInitialValue(0.);
s.setDepth(1);

@Input T;
T.setGlossaryName("Temperature");
T.setDepth(1);

@Input f;
f.setEntryName("FastNeutronFluence");
f.setDepth(1);

@Input n;
n.setEntryName("FastNeutronFlux");
n.setDepth(1);

@Includes{
#include<sstream>
#include<stdexcept>
}

@Function compute
{
  const real theta = 0.5*(T_1+T)-273.15;
  const real Phi   = 0.5*(f_1+f);
  real swellingSaturation;
  real incr;
  // original law is given in %,here is divided by 100. 
  if((0<=theta)&&(theta<=1500)){
    swellingSaturation = 0.04*exp(-theta/370);
  } else {
    ostringstream msg;
    msg << "SIC_SwellingModel::computeSwellingIncrement : ";
    msg << "temperature is out of bounds (" << theta << ")";
    throw(runtime_error(msg.str()));
  }
  incr  = swellingSaturation/Phi0;
  incr *= exp(-Phi/Phi0);
  // terme supplémentaire à plus haute température
  if((1000.<theta)&&(theta<=1250.)){
    incr+=1.297e-28*((theta-1000.)/250.);
  } else if (theta>=1250.){
    incr+=1.297e-28;
  }
  incr *= 0.5*(n+n_1)*dt;
  s = s_1 + incr;
} // end of function compute
