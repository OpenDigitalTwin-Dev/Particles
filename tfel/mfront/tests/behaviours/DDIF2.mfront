@DSL Implicit;
@Behaviour DDIF2;
@Author Helfer Thomas;
@Date 5 Mars 2010;

@Theta 0.5;

@MaximumNumberOfIterations 100;
@UMATUseTimeSubStepping[umat] true;
@UMATMaximumSubStepping[umat] 20;

@Includes{
#include"TFEL/Material/DDIF2Base.hxx"
}

@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

@MaterialProperty real A;
A.setEntryName("NortonCoefficient");
@MaterialProperty real E;
E.setEntryName("NortonExponent");
@MaterialProperty real sigr; 
sigr.setEntryName("FractureStress");

@LocalVar real lambda;
@LocalVar real mu;

@StateVar real e0;  // strain in first  direction
@StateVar real e1;  // strain in second direction
@StateVar real e2;  // strain in third direction
@StateVar real p;   // cumulated viscoplastic strain
@AuxiliaryStateVar real e0m; // hardening in first  direction
@AuxiliaryStateVar real e1m; // hardening in second direction
@AuxiliaryStateVar real e2m; // hardening in third direction

@LocalVar Stensor n0;
@LocalVar Stensor n1;
@LocalVar Stensor n2;

/* Initialize Lame coefficients */
@InitLocalVariables{
  lambda = computeLambda(young,nu);
  mu = computeMu(young,nu);
  // directions 
  n0 = Stensor(real(0.));
  n1 = Stensor(real(0.));
  n2 = Stensor(real(0.));
  n0(0) = real(1.);
  n1(1) = real(1.);
  n2(2) = real(1.);
  // change to cylindrical coordinates
  DDIF2Base::cart2cyl(deto,0.);
} // end of @InitLocalVariables

@ComputeStress{
  sig = lambda*trace(eel)*Stensor::Id()+2*mu*eel;
} // end of @ComputeStresss

@Integrator{
  constexpr real cste = real{3}/real{2};
  const stress Rp = -0.5*young;
  // fracture strain
  const Stensor de_fis = de0*n0+de1*n1+de2*n2;
  /* elasticity */
  // normal 
  const real sigeq = min(sigmaeq(sig),500.e6);
  real inv_sigeq(0);
  Stensor  n(0.);
  if(sigeq > 1.){
    inv_sigeq = 1/sigeq;
  }
  n     = cste*deviator(sig)*inv_sigeq;
  // implicit equation for elasticity
  feel += de_fis+dp*n-deto;
  // jacobian
  dfeel_dde0   = n0;
  dfeel_dde1   = n1;
  dfeel_dde2   = n2;
  dfeel_ddp    = n;
  dfeel_ddeel += 2*mu*theta*inv_sigeq*dp*(cste*Stensor4::K()-(n^n));
  /* creep */
  const real tmp  = A*pow(sigeq,E-1.);
  fp             -= tmp*sigeq*dt;
  dfp_ddeel       = -2*mu*theta*tmp*E*dt*n;
  /* fracture */
  sig = lambda*trace(eel+deel)*Stensor::Id()+2*mu*(eel+deel);
  DDIF2Base::treatFracture(dfe0_ddeel,dfe0_dde0,fe0,
			   e0m,e0,de0,sig,n0,
			   sigr,Rp,young,lambda,mu);
  DDIF2Base::treatFracture(dfe1_ddeel,dfe1_dde1,fe1,
			   e1m,e1,de1,sig,n1,
			   sigr,Rp,young,lambda,mu);
  DDIF2Base::treatFracture(dfe2_ddeel,dfe2_dde2,fe2,
			   e2m,e2,de2,sig,n2,
			   sigr,Rp,young,lambda,mu);
} // end of @Integrator

@UpdateAuxiliaryStateVars{
  e0m=max(e0m,e0);
  e1m=max(e1m,e1);
  e2m=max(e2m,e2);
  // change to cartesian coordinates
  DDIF2Base::cyl2cart(sig,0.);
} // end of @UpdateAuxiliaryStateVars

@TangentOperator{
  static_cast<void>(smt);
  Dt = lambda*Stensor4::IxI()+2*mu*Stensor4::Id();
} // end of @TangentOperator
