@DSL Implicit;
@Author Thomas Helfer;
@Date   21/09/2017;
@Behaviour ImplicitNorton_NumericallyComputedJacobianBlocks;
@Description{
  This file implements the Norton law, described as:
  "$$"
  "\left\{"
  "  \begin{aligned}"
  "    \tepsilonto   &= \tepsilonel+\tepsilonvis \\"
  "    \tsigma       &= \tenseurq{D}\,:\,\tepsilonel\\"
  "    \tdepsilonvis &= \dot{p}\,\tenseur{n} \\"
  "    \dot{p}       &= A\,\sigmaeq^{m}"
  "  \end{aligned}"
  "\right."
  "$$"
}

@Brick StandardElasticity;
@NumericallyComputedJacobianBlocks {dfp_ddeel};
@NumericallyComputedJacobianBlocks {dfeel_ddeel};
@Epsilon 1.e-16;

@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

@StateVariable strain p;
@PhysicalBounds p in [0:*[;

@Integrator{
  const auto A = 8.e-67;
  const auto E = 8.2;
  const auto seq = sigmaeq(sig);
  const auto tmp = A*pow(seq,E-1.);
  const auto iseq = 1/(max(seq,real(1.e-12)*young));
  const auto n = eval(3*deviator(sig)*(iseq/2));
  feel += dp*n;
  fp   -= tmp*seq*dt;
  // jacobian
  dfeel_ddp    = n;
} // end of @Integrator
