/*!
 * \file   ImplicitNorton2.mfront
 * \brief  
 * 
 * \author Helfer Thomas
 * \date   12 fÃ©vrier 2013
 */

@DSL Implicit;
@Behaviour ImplicitNorton2;

@Epsilon 1.e-14;

// @CompareToNumericalJacobian true;
// @JacobianComparisonCriterium 1.e-8;
// @PerturbationValueForNumericalJacobianComputation 1.e-8;

@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

@LocalVariable real     lambda;
@LocalVariable real     mu;

// store for the Von Mises stress 
// for the tangent operator
@LocalVariable real seq;
// store the derivative of the creep function
// for the tangent operator
@LocalVariable real df_dseq;
// store the normal tensor
// for the tangent operator
@LocalVariable Stensor n;

@StateVariable real    p[2];
p.setGlossaryName("EquivalentViscoplasticStrain");
@StateVariable Stensor evp[2];
evp.setGlossaryName("ViscoplasticStrain");

/* Initialize Lame coefficients */
@InitLocalVariables{
  lambda = computeLambda(young,nu);
  mu = computeMu(young,nu);
} // end of @InitLocalVariables

@ComputeStress{
  sig = lambda*trace(eel)*Stensor::Id()+2*mu*eel;
} // end of @ComputeStresss

@Integrator{
  const real A = 4.e-67;
  const real E = 8.2;
  seq = sigmaeq(sig);
  const real tmp = A*pow(seq,E-1.);
  df_dseq = E*tmp;
  real inv_seq(0);
  n = Stensor(0.);
  if(seq > 1.e-8*young){
    inv_seq = 1/seq;
    n       = 1.5*deviator(sig)*inv_seq;
  }
  feel -= deto;
  Stensor4 dn_ddeel = 2.*mu*theta*inv_seq*(Stensor4::M()-(n^n));
  for(unsigned short i=0;i!=2;++i){
    feel           += devp(i);
    fevp(i)        -= dp(i)*n;
    fp(i)          -= tmp*seq*dt;
    dfeel_ddevp(i)  = Stensor4::Id();
    dfevp_ddp(i,i)  = -n;
    dfevp_ddeel(i)  = -dp(i)*dn_ddeel;
    dfp_ddeel(i)    = -2*mu*theta*tmp*E*dt*n;
  }
} // end of @Integrator

@TangentOperator{
  if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
    computeAlteredElasticStiffness<hypothesis,Type>::exe(Dt,lambda,mu);
  } else if (smt==CONSISTENTTANGENTOPERATOR){
    StiffnessTensor De;
    Stensor4 Je;
    computeUnalteredElasticStiffness<N,Type>::exe(De,lambda,mu);
    getPartialJacobianInvert(Je);
    Dt = De*Je;
  } else {
    return false;
  }
}
