@DSL       Implicit;
@Behaviour OrthotropicElastic6;
@Author    Helfer Thomas;
@Date      26/02/16;

@ModellingHypotheses {".+"};
@Epsilon 1.e-16;
@Theta 1;

@OrthotropicBehaviour<Pipe>;
@ComputeStiffnessTensor<UnAltered>{7.8e+10,2.64233e+11,3.32e+11,
    0.13,0.24,0.18,
    4.8e+10,1.16418e+11,7.8e+10};
@ComputeThermalExpansion 3.41e-5;

@StateVariable<PlaneStress> real etozz;
PlaneStress::etozz.setGlossaryName("AxialStrain");
@StateVariable<AxisymmetricalGeneralisedPlaneStress> real etozz;
AxisymmetricalGeneralisedPlaneStress::etozz.setGlossaryName("AxialStrain");
@ExternalStateVariable<AxisymmetricalGeneralisedPlaneStress> stress sigzz;
AxisymmetricalGeneralisedPlaneStress::sigzz.setGlossaryName("AxialStress");

@Integrator{
  feel -= deto;
}

@ComputeFinalStress {
  sig = D_tdt*eel;
}

@Integrator<PlaneStress,Append,AtEnd>{
  // the plane stress equation is satisfied at the end of the time
  // step
  const stress szz = D_tdt(2,2)*(eel(2)+deel(2))+
    D_tdt(2,0)*(eel(0)+deel(0))+
    D_tdt(2,1)*(eel(1)+deel(1));
  fetozz   = szz/D_tdt(2,2);
  // modification of the partition of strain
  feel(2) -= detozz;
  // jacobian
  dfeel_ddetozz(2) = -1;
  dfetozz_ddeel(2) =  1;
  dfetozz_ddeel(0) = D_tdt(2,0)/D_tdt(2,2);
  dfetozz_ddeel(1) = D_tdt(2,1)/D_tdt(2,2);
}

@Integrator<AxisymmetricalGeneralisedPlaneStress,Append,AtEnd>{
  // the plane stress equation is satisfied at the end of the time
  // step
  const stress szz = D_tdt(1,1)*(eel(1)+deel(1))+
    D_tdt(1,0)*(eel(0)+deel(0))+
    D_tdt(1,2)*(eel(2)+deel(2));
  fetozz   = (szz-sigzz-dsigzz)/D_tdt(1,1);
  // modification of the partition of strain
  feel(1) -= detozz;
  // jacobian
  dfeel_ddetozz(1) = -1;
  dfetozz_ddeel(1) =  1;
  dfetozz_ddeel(0) = D_tdt(1,0)/D_tdt(1,1);
  dfetozz_ddeel(2) = D_tdt(2,0)/D_tdt(1,1);
}

@IsTangentOperatorSymmetric true;
@TangentOperator{
  static_cast<void>(smt);
  if(hypothesis==ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS){
    Dt(0,0)=D_tdt(0,0)-D_tdt(0,1)*D_tdt(1,0)/D_tdt(1,1);
    Dt(2,0)=D_tdt(2,0)-D_tdt(1,2)*D_tdt(1,0)/D_tdt(1,1);
    Dt(0,2)=D_tdt(0,2)-D_tdt(0,1)*D_tdt(2,1)/D_tdt(1,1);
    Dt(2,2)=D_tdt(2,2)-D_tdt(1,2)*D_tdt(2,1)/D_tdt(1,1);
    Dt(0,1)=Dt(1,0)=Dt(1,2)=Dt(2,1)=Dt(1,1)=stress(0);
    std::cout << "Dt: " << Dt << '\n';
    std::cout << "Dt: " << Dt(1,2) << '\n';
} else {
    Dt = D_tdt;
  }
}
