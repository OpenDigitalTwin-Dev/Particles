@DSL Implicit;
@Author Thomas Helfer;
@Date   21/09/2008;
@Behaviour ImplicitNorton4;
@Description{
  This file implements the Norton law, described as:
  "$$"
  "\left\{"
  "  \begin{aligned}"
  "    \tepsilonto   &= \tepsilonel+\tepsilonvis \\"
  "    \tsigma       &= \tenseurq{D}\,:\,\tepsilonel\\"
  "    \tdepsilonvis &= \dot{p}\,\tenseur{n} \\"
  "    \dot{p}       &= A\,\sigmaeq^{m}"
  "  \end{aligned}"
  "\right."
  "$$"
  This implementation is used to test the GenericPlaneStress
  support provided by the Cast3M interface.
}

@Brick "StandardElasticity";
@Epsilon 1.e-16;

@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

@LocalVariable real mu;

@StateVariable real p;
@PhysicalBounds p in [0:*[;

/* Initialize shear modulus */
@InitLocalVariables{
  mu = computeMu(young,nu);
} // end of @InitLocalVariables
			  
@Integrator{
  const real A = 8.e-67;
  const real E = 8.2;
  const auto seq = sigmaeq(sig);
  const auto iseq = 1/(std::max(seq,1.e-8*young));
  const auto n       = 1.5*deviator(sig)*iseq;
  // elasticity
  feel += dp*n;
  const auto tmp = A*pow(seq,E-1.);
  // viscoplasticity
  fp   -= tmp*seq*dt;
  // jacobian
  dfeel_ddeel += 2*mu*theta*dp*iseq*(Stensor4::M()-(n^n));
  dfeel_ddp    = n;
  dfp_ddeel    = -2*mu*theta*E*tmp*dt*n;
} // end of @Integrator
