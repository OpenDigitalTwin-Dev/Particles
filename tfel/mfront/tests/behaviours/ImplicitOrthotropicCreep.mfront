@DSL Implicit;
@Behaviour ImplicitOrthotropicCreep;
@Author    Helfer Thomas;
@Date      15/03/11;

@OrthotropicBehaviour;
@RequireStiffnessTensor;
// @CompareToNumericalJacobian true;
@Theta 1.;
@AsterCompareToNumericalTangentOperator[aster]  true;
@AsterTangentOperatorComparisonCriterium[aster] 1.e7;
@Epsilon 1.e-12;

@StateVariable real p;      /* Equivalent viscoplastic strain */
p.setGlossaryName("EquivalentViscoplasticStrain");

@AuxiliaryStateVariable real seq;
seq.setGlossaryName("HillStress");

@LocalVariable Stensor4 H;

@InitLocalVariables{
  const real H_F = 0.371;
  const real H_G = 1-H_F;
  const real H_H = 4.052;
  const real H_L = 1.5;
  const real H_M = 1.5;
  const real H_N = 1.5;
  H = hillTensor<N,real>(H_F,H_G,H_H,
			 H_L,H_M,H_N);
  
}

@ComputeStress{
  sig = D*eel;
}

@Integrator{
  const real A = 8.e-67;
  const real E = 8.2;
  const real sigeq = sqrt(sig|H*sig);
  const real tmp = A*pow(sigeq,E-1.);
  real inv_sigeq(0);
  Stensor  n(0.);
  if(sigeq > 1.){
    inv_sigeq = 1/sigeq;
  }
  n  = (H*sig)*inv_sigeq;
  feel += dp*n-deto;
  fp   -= tmp*sigeq*dt;
  // jacobian
  dfeel_ddeel += theta*dp*(H-(n^n))*D*inv_sigeq;
  dfeel_ddp    = n;
  dfp_ddeel    = -theta*tmp*E*dt*(n|D);
}

@UpdateAuxiliaryStateVars{
  seq = sqrt(sig|H*sig);
}

@IsTangentOperatorSymmetric true;
@TangentOperator{
  if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
    Dt = D;
  } else if(smt==CONSISTENTTANGENTOPERATOR){
    Stensor4 Je;
    getPartialJacobianInvert(Je);
    Dt = D*Je;
  } else {
    return false;
  }
}
