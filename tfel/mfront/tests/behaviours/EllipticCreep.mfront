@DSL    Implicit;
@Behaviour EllipticCreep;
@Author    Thomas Helfer;
@Date  9/12/2013;

// elastic properties
@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

/*! equivalent hydrostatic viscoplastic strain */
@StateVariable real pv;
pv.setEntryName("HydrostaticEquivalentViscoplasticStrain");
/*! equivalent deviatoric viscoplastic strain */
@StateVariable real pd;
pd.setEntryName("DeviatoricEquivalentViscoplasticStrain");
// porosity
@StateVariable real f;
f.setGlossaryName("Porosity");

/*! bulk modulus */
@LocalVar real K;
/*! first Lame coefficient */
@LocalVar real lambda;
/*! second Lame coefficient */
@LocalVar real mu;

/* Initialize Lame coefficients */
@InitLocalVariables{
  lambda = computeLambda(young,nu);
  mu = computeMu(young,nu);
  K = lambda+(2*mu)/3;
} // end of @InitLocalVariables

@ComputeStress{
  sig = lambda*trace(eel)*Stensor::Id()+2*mu*eel;
} // end of @ComputeStresss

@Integrator{
  const real A = 8.e-67;
  const real E = 8.2;
  // porosity
  const real f_ = max(f+theta*df,real(0));
  ff       = df*(1+theta*dpv)-(1-f)*dpv;
  dff_ddf  = (1+theta*dpv);
  dff_ddpv = -1+f_;
  // hydrostatic pressure
  const real pr  = trace(sig)/real(3);
  const real seq = sigmaeq(sig);
  // current porosity
  const real Af = pow((pow(f_,-E)-1)/E,-2/(E+1));
  const real Bf = (1+2*f_/real(3))*pow(1-f_,-2/(E+1));
  // equivalent stress
  const real s  = sqrt(Af*pr*pr+Bf*seq*seq);
  if(s>1.e-8*young){
    // normals
    real inv_seq(0);
    Stensor n(real(0.));
    if(seq > 1.e-8*young){
      inv_seq = 1/seq;
      n       = 1.5*deviator(sig)*inv_seq;
    }
    const real tmp           =  A*pow(s,E-1);
    const real ds_dpr        =  Af*pr/s;
    const real ds_dseq       =  Bf*seq/s;
    const real d2s_dpr2      =  Af*Bf*seq*seq/(s*s*s);
    const real d2s_dseq2     =  Af*Bf*pr *pr /(s*s*s);
    const real d2s_dprdseq   = -Af*Bf*pr *seq/(s*s*s);
    const real dphi_ds       =  tmp*s;
    const real d2phi_ds2     =  E*tmp;
    const real dphi_dp       =  dphi_ds*ds_dpr;
    const real dphi_dseq     =  dphi_ds*ds_dseq;
    const real d2phi_dp2     =  d2phi_ds2*ds_dpr*ds_dpr  +dphi_ds*d2s_dpr2;
    const real d2phi_dpdseq  =  d2phi_ds2*ds_dpr*ds_dseq +dphi_ds*d2s_dprdseq;
    const real d2phi_dseq2   =  d2phi_ds2*ds_dseq*ds_dseq+dphi_ds*d2s_dseq2;
    fpv        -= dphi_dp*dt;
    dfpv_ddeel -= theta*dt*(d2phi_dp2*K*Stensor::Id()+2*mu*d2phi_dpdseq*n);
    // deviatoric part
    fpd        -= dphi_dseq*dt; 
    dfpd_ddeel -= theta*dt*(2*mu*d2phi_dseq2*n+K*d2phi_dpdseq*Stensor::Id());
    // elasticity
    feel        += (dpv/3)*Stensor::Id()+dpd*n;
    dfeel_ddeel += 2.*mu*theta*dpd*inv_seq*(Stensor4::M()-(n^n));
    dfeel_ddpv   = (real(1)/3)*Stensor::Id();
    dfeel_ddpd   = n;
  }
  feel -= deto;
} // end of @Integrator

@TangentOperator{
  if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
    computeAlteredElasticStiffness<hypothesis,Type>::exe(Dt,lambda,mu);
  } else if (smt==CONSISTENTTANGENTOPERATOR){
    Stensor4 Je;
    getPartialJacobianInvert(Je);
    StiffnessTensor De;
    computeUnalteredElasticStiffness<N,Type>::exe(De,lambda,mu);
    Dt = De*Je;
  } else {
    return false;
  }
}
