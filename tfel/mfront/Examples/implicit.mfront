/*!
 * \file   implicit.mfront
 * \brief  
 * 
 * \author Helfer Thomas
 * \date   21 sep 2008
 */

@Parser Implicit;
@Behaviour Norton;

@Includes{
#include"TFEL/Material/Lame.hxx"
}

@MaterialProperty stress young;
young.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");

@LocalVariable real     lambda;
@LocalVariable real     mu;

// store for the Von Mises stress 
// for the tangent operator
@LocalVariable real seq;
// store the derivative of the creep function
// for the tangent operator
@LocalVariable real df_dseq;
// store the normal tensor
// for the tangent operator
@LocalVariable Stensor n;

@StateVariable real    p;

/* Initialize Lame coefficients */
@InitLocalVars{
  using namespace tfel::material::lame;
  lambda = computeLambda(young,nu);
  mu = computeMu(young,nu);
} // end of @InitLocalVars

@TangentOperator{
  Dt = lambda*Stensor4::IxI()+2*mu*Stensor4::Id();
  const real seq_e = seq+3*mu*theta*dp;
  if(seq_e>1.e-8*young){
    const real tmp =  dp/seq_e;
    const Stensor4& M = Stensor4::M();
    Dt += -4*mu*mu*theta*(tmp*M-(tmp-df_dseq*dt/(1+3*mu*theta*dt*df_dseq))*(n^n));
  }
}

@ComputeStress{
  sig = lambda*trace(eel)*Stensor::Id()+2*mu*eel;
} // end of @ComputeStresss

@Integrator{
  const real A = 8.e-67;
  const real E = 8.2;
  seq = sigmaeq(sig);
  const real tmp = A*pow(seq,E-1.);
  df_dseq = E*tmp;
  real inv_seq(0);
  n = Stensor(0.);
  if(seq > 1.e-8*young){
    inv_seq = 1/seq;
    n       = 1.5*deviator(sig)*inv_seq;
  }
  feel += dp*n-deto;
  fp   -= tmp*seq*dt;
  // jacobian
  dfeel_ddeel += 2.*mu*theta*dp*inv_seq*(Stensor4::M()-(n^n));
  dfeel_ddp    = n;
  dfp_ddeel    = -2*mu*theta*df_dseq*dt*n;
} // end of @Integrator
